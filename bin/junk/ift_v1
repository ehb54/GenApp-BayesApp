#!/usr/bin/perl

## user defines

# uncomment below to create a logfile
$save_in_log = "/tmp/ift.log";

# uncomment below to enable messaging
$enable_msg = 1;

# $debug++;

## end user defines

{
    if ( $] < 5.018 ) {
        my $f = "/etc/profile.d/genapp.sh";
        my $gb;
        if ( -e $f ) {
            my $fh;
            !open $fh, $f || die "Error: the version of perl found is < 5.18 and, although there exists $f, the permissions do now allow reading by this process\n";
            my @l = <$fh>;
            close $fh;
            @l = grep !/^\s*#/, @l;
            @l = grep /GENAPP=/, @l;
            grep chomp, @l;
            die "Error: the version of perl found is < 5.18 and, although there exists $f, there is no definition of GENAPP available within it.\n" if !@l;
            my $l = pop @l;
            ( $gb ) = $l =~ /GENAPP=([^#;]+)/;
            die "Error: the version of perl found is < 5.18 and, although there exists $f, the value of GENAPP within it could not be parsed.\n" if !$gb;
            die "Error: the version of perl found is < 5.18 and, although there exists $f, the value of GENAPP within it ($gb) is not a directory.\n" if !-d $gb;
        } else {
            die "Error: the version of perl found is < 5.18 and $f does not exist\n";
        }        
        if ( -e "$gb/perl/bin/perl" ) {
            $pv =`$gb/perl/bin/perl -e 'print \$];'`;
            if ( $pv >= 5.018 ) {
                unshift @ARGV, $0;
                exec( "$gb/perl/bin/perl", @ARGV );
            } else {
                die "$gb/perl/bin/perl exists, but not a correct version of perl (needs a minimum of 5.18)\n";
            }
        } else {
            die "you need to install a version of perl >= 5.18 in $gb/perl\n
there is a script $gb/sbin/install-perl-stable to do this";
        }
    }
}

my $rc = eval {
    require JSON;         JSON->import();
};

if ( !@ARGV )
{
    print "\{\"error\":\"ift called with no arguments\"\}\n";
    exit;
}

$ref = decode_json( shift );

## messaging setup

sub sendmsg {};

if ( $enable_msg ) {
    
    my $rc = eval {
        require IO::Socket;   IO::Socket->import();
    };

    my $domsg = $$ref{ "_uuid" } && $$ref{ "_udpport" } && $$ref{ "_udphost" };

    my $sock;
    $sock = IO::Socket::INET->new( Proto => 'udp', PeerPort => $$ref{ "_udpport" }, PeerAddr => $$ref{ "_udphost" } ) if $domsg;

    sub sendmsg {
        return if !$domsg;
        my $text = $_[0];
        my $prog = $_[1];
        print "sendmsg: $prog $text\n" if $debug;
 
        if ( length( $text ) || length( $prog ) ) {
            my $msg  = {};
            $$msg{ "_uuid" } = $$ref{ "_uuid" };
            $$msg{ "_textarea" } = $text if length( $text );
            $$msg{ "_progress" } = $prog if length( $prog );
            $sock->send( encode_json( $msg ) );
        }
    }
}


## format inputs for replacement
sub formatinput {
    my $x    = $_[0];
    my $dec  = $_[1];
    my $mlen = $_[2];
    my $fmt  = "\%.${mlen}f";
    my $out  = sprintf( $fmt, $x );
    $out = substr( $out, 0, $mlen );
    $out .= '0'x( $mlen - length( $out ) );
    $out;
}

$res = {};


# setup inputdata

my $inputfile;
my %files;

{
# l1
    $files{'data'} = $$ref{ 'datafile' }[0];
    $files{'data'} =~ s/^.*\/([^\/]+)$/$1/;
    $inputfile .= $files{'data'} . "\n";
# l2
    $inputfile .= $$ref{ 'qmin' } . "\n";
# l3
    $inputfile .= $$ref{ 'qmax' } . "\n";
# l4
    $inputfile .= ( $$ref{ 'dmaxfixed' } ? "f" : "" ) . $$ref{ 'dmax' } . "\n";
# l5
    $inputfile .= $$ref{ 'eta' } . "\n";
# l6
    $inputfile .= ( $$ref{ 'alphafixed' } ? "f" : "" ) . $$ref{ 'alpha' } . "\n";
# l7
    $inputfile .= $$ref{ 'smearing' } . "\n";
# l8
    $inputfile .= ( $$ref{ 'estimateratiofixed' } ? "f" : "" ) . $$ref{ 'estimateratio' } . "\n";
# l9
    $inputfile .= $$ref{ 'fitratio' } . "\n";
# l10
    $inputfile .= $$ref{ 'prpoints' } . "\n";
# l11
    $inputfile .= $$ref{ 'noextracalc' } . "\n";
# l12
    $inputfile .= $$ref{ 'transform' } . "\n";
# l13
    $inputfile .= ( $$ref{ 'fitbackground' } ? "y" : "n" ) . "\n";
# l14
    $inputfile .= ( $$ref{ 'smallplot' } ? "S" : "L" ) . "\n";
}

open OUT, ">inputfile.d";
print OUT $inputfile;
close OUT;

my @l;

{
    my $cmd = "${0}ci < inputfile.d\n";

    sendmsg( "Starting $cmd\n", 0 );

    open my $fh, '-|', $cmd;


    my @msgs;

    my $count = 25;
    my $linespermsg = 67;

    while ( my $l = <$fh> ) {
        if ( $l !~ /=>/ ) {
            $count++;
            push @msgs, $l;
            push @l, $l;
        }

        if ( $count > $linespermsg ) {
            $count = 0;
            sendmsg( ( join '', @msgs ) );
            undef @msgs;
        }
    }

    close $fh;

    sendmsg( ( join '', @msgs ) ) if @msgs;
}

my $dmax;
{
    my @f;
    my $f;

    @f = grep /p_1\(r\) in/, @l;
    if ( @f ) {
        $f = $f[ 0 ];
        $f =~ s/^.*:\s*(\S+)\s*$/$1/;
        $files{ "pr" } = $f;
        $$res{ "pr" } = $$ref{ '_base_directory' } . '/' . $f;
    }

    @f = grep /Fit of data in/, @l;
    if ( @f ) {
        $f = $f[ 0 ];
        $f =~ s/^.*:\s*(\S+)\s*$/$1/;
        $files{ "fit" } = $f;
        $$res{ "fitofdata" } = $$ref{ '_base_directory' } . '/' . $f;
    }

    @f = grep /Data used in/, @l;
    if ( @f ) {
        $f = $f[ 0 ];
        $f =~ s/^.*:\s*(\S+)\s*$/$1/;
        $$res{ "dataused" } = $$ref{ '_base_directory' } . '/' . $f;
    }

    @f = grep /Rg, I\(0\) and Dmax in/, @l;
    if ( @f ) {
        $f = $f[ 0 ];
        $f =~ s/^.*:\s*(\S+)\s*$/$1/;
        # $$res{ "rgi0dmax" } = $$ref{ '_base_directory' } . '/' . $f;

        open my $fh, $f;
        my @l = <$fh>;
        close my $fh;
        shift @l while @l && $l[ 0 ] !~ /^\s*Rg/;
        shift @l;

        my @h = (
            "Rg",
            "axratio",
            "minusK",
            "chi2",
            "logalpha",
            "etaout",
            "dmaxout",
            "I0",
            "evidence" );

        grep s/^\s+//, @l;
        grep s/\s+$//, @l;

        my @v = split /\s+/, $l[ 0 ];
        my @e = split /\s+/, $l[ 1 ];

        for ( my $i = 0; $i < @h; ++$i ) {
            $$res{ $h[ $i ] } = $v[ $i ] . " ± " . $e[ $i ];
            $dmax = $v[ $i ] if $h[ $i ] eq 'dmaxout';
        }
    }

    @f = grep /Parameters in/, @l;
    if ( @f ) {
        $f = $f[ 0 ];
        $f =~ s/^.*:\s*(\S+)\s*$/$1/;
        $$res{ "parameters" } = $$ref{ '_base_directory' } . '/' . $f;
        if ( -e $f ) {
            open my $fh, $f;
            my @l = <$fh>;
            close $fh;
            my @t = (
		'I(0) estimated'
		,'Maximum diameter'
		,'Radius of gyration'
		,'Axial ratio from p(r) (pro)'
		,'Axial ratio from p(r) (obl)'
		,'Chi-square for solution'
		,'Background estimated'
		,'Log(alpha) (smoothness)'
                ,'Number of good parameters'
                ,'Number of Shannon channels'
		,'Evidence at maximum'
                );
            my @k = (
		'I0'
                ,'dmaxout'
                ,'Rg'
                ,'axratio_pro'
                ,'axratio_obl'
                ,'chi2'
                ,'background'
                ,'logalpha'
                ,'Ng'
                ,'shannon'
                ,'evidence'
                );
            for ( my $i = 0; $i < @t; ++$i ) {
                my @ml = grep /$t[$i]/, @l;
                if ( @ml ) {
                    my $ml = $ml[0];
                    my ( $v, $e ) = $ml =~ /^.*:\s*([0-9\.-]*)\s*(?:|\+-\s*([0-9\.-]*))\s*$/;
                    print "v $v e $e\n";
                    $$res{ $k[$i] } = $v;
                    $$res{ $k[$i] } .= " ± " . $e if $e;
                }
            }
        }
    }
}

my $dmaxmultcut = 1.3;

# copy files for plotting
{
    $$res{ 'debug' } = "<p>dmax $dmax</p>" if $debug;
    my $cmd = 
        "cp in_" . $files{ 'pr' } . " data.d
cp " . $files{ 'fit' } . " fit.d
";

# cp gx_" . $files{ 'pr' } . " gx.d
# cp gs_" . $files{ 'pr' } . " gs.d
# cp " . $files{ 'pr' } . " estimate.d
# ";

    `$cmd 2>&1 > /dev/null`;

    my @from = (
        "gx_" . $files{ 'pr' },
        "gs_" . $files{ 'pr' },
        $files{ 'pr' }
        );

    my @to = (
        "gx.d",
        "gs.d",
        "estimate.d"
        );
    
    
    for ( my $i = 0; $i < @from; ++$i ) {
        open my $fh, $from[ $i ];
        my @l = <$fh>;
        close @l;
        my @w;
        $$res{ 'debug' } .= "<p>f " . $from[$i] . "</p>" if $debug;
        for ( my $j = 0; $j < @l; ++$j ) {
            my $t = $l[ $j ];
            $t =~ s/^\s*//;
            $t =~ s/\s+.*//g;

            $$res{ 'debug' } .= "<p>t $t</p>" if $debug;
            if ( $t <= $dmax * $dmaxmultcut ) {
                $$res{ 'debug' } .= "<p>push $l[$j]</p>" if $debug;
                push @w, $l[ $j ];
            } else {
                last;
            }
        }

        open $fh, ">" . $to[ $i ];
        print $fh join '', @w;
        close $fh;
    }

    {
        open my $fh, "plot4.pl";
        my @l = <$fh>;
        close @l;

        for ( $i = 0; $i < @l; ++$i ) {
            my $l = $l[ $i ];
            if ( $l =~ / set xrange \[0:/ ) {
                $l[ $i ] = " set xrange [0:" . ( $dmax * $dmaxmultcut) . "]\n";
            }
            if ( $l =~ / set xtics / ) {
                my $xtics = ( $dmax * $dmaxmultcut ) / 10;
                $$res{ 'debug' } .= "<p>xtics $xtics</p>" if $debug;
                if ( $xtics < 1 ) {
                    $xtics = 1;
                } else {
                    if ( $xtics < 5 ) {
                        $xtics = 5;
                    } else {
                        if ( $xtics < 10 ) {
                            $xtics = 10;
                        } else {
                            if ( $xtics < 25 ) {
                                $xtics = 25;
                            } else {
                                if ( $xtics < 50 ) {
                                    $xtics = 50;
                                } else {
                                    $$res{ 'debug' } .= "<p>xtics fixed compute</p>"  if $debug;
                                    $xtics = 10 * int( $xtics / 10 );
                                }
                            }
                        }
                    }
                }
                $$res{ 'debug' } .= "<p>xtics final $xtics</p>" if $debug;
                $l[ $i ] = " set xtics $xtics\n";
            }
        }
        open my $fh, ">plot4b.pl";
        print $fh join '', @l;
        close $fh;
    }
}

# run plot scripts
{
    my $cmd = 
"${0}_gnuplot426 plot1.pl 2>&1 > plot1.out
${0}_gnuplot426 plot2.pl 2>&1 > plot2.out
${0}_gnuplot426 plot3.pl 2>&1 > plot3.out
${0}_gnuplot426 plot4b.pl 2>&1 > plot4.out
${0}_gnuplot426 plot5.pl 2>&1 > plot5.out
mv fig2.gif iq.gif
mv fig4.gif pr.gif
";
    `$cmd`;

    $$res{ "iqfig" } = $$ref{ '_base_directory' } . '/iq.gif';
    $$res{ "prfig" } = $$ref{ '_base_directory' } . '/pr.gif';
}

# package results
{
    my $f = $files{ 'data' };
    $f =~ s/\.dat$//i;
    my $cmd =
"zip Result_$f.zip data.d fit.d estimate.d parameters.d pr.gif iq.gif 2>&1
tar zcf Result_$f.tar.gz data.d fit.d estimate.d parameters.d pr.gif iq.gif 2>&1
";
    `$cmd`;
    $$res{ "zip" } = $$ref{ '_base_directory' } . "/Result_$f.zip";
    $$res{ "tgz" } = $$ref{ '_base_directory' } . "/Result_$f.tar.gz";
}

# $$res{ 'cmd results' } = `$cmd`;

# assemble output

# $$res{ "note" } = "ift executable";

if ( length( $save_in_log ) ) {
    my $rc = eval {
        require Data::Dumper;;   Data::Dumper->import();
    };

    open OUT, ">>$save_in_log";
    print OUT "-"x20 . "\n";
    print OUT `date`;
    print OUT "$0\n";
    print OUT "--- input ---\n";
    print OUT Dumper($ref);
    print OUT "--- output ---\n";
    print OUT Dumper($res);
    print OUT "-"x20 . "\n";
    print OUT $inputfile;
    print OUT "-"x20 . "\n";
    print OUT $cmd;
    print OUT "-"x20 . "\n";
    close OUT;
}

print encode_json( $res ) . "\n";


